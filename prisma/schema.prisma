generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // pooler 6543 no runtime
  directUrl = env("DIRECT_URL")   // direta 5432 p/ migrate/seed
}

enum Role {
  CLIENT
  COMPANY
  ADMIN
}

enum WorkspaceRole {
  ADMIN
  MEMBER
  CUSTOMER
}

enum FeatureStatus {
  BACKLOG
  UNDER_REVIEW
  IN_DEVELOPMENT
  DELIVERED
}

// next-auth standard tables
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model User {
  id           String   @id @default(uuid())
  name         String?
  email        String   @unique
  passwordHash String?  @map("passwordHash")
  avatarUrl    String?  @map("avatar_url")
  createdAt    DateTime @default(now()) @map("createdAt")
  updatedAt    DateTime @default(now()) @updatedAt @map("updatedAt")

  accounts Account[]
  sessions Session[]

  // RBAC
  role Role @default(CLIENT)

  // Flag: administrador do workspace (primeiro usuário)
  workspaceAdmin Boolean @default(false)

  // Multi-tenant
  workspaceId String?
  workspace   Workspace? @relation(fields: [workspaceId], references: [id])

  // External client company
  customerCompanyId String?
  customerCompany   CustomerCompany? @relation(fields: [customerCompanyId], references: [id])

  invites Invite[]

  // authored content
  features             Feature[]         @relation("FeatureAuthor")
  comments             FeatureComment[]
  votes                FeatureVote[] // <-- ADICIONE
  changelogsAuthored   ChangelogEntry[]  @relation("ChangelogAuthor") // <-- ADICIONE
  workspaceMemberships WorkspaceMember[]

  @@map("User")
}

model Company {
  id        String   @id @default(cuid())
  name      String
  domain    String?  @unique
  taxId     String?  @unique // CNPJ (opcional)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  workspaces WorkspaceCompany[]
}

model Workspace {
  id   String @id @default(cuid())
  name String
  slug String @unique

  // Se desabilitado, páginas públicas exigem login com usuário interno do workspace
  publicAccessEnabled Boolean @default(true)

  // Marca se o onboarding inicial foi concluído
  onboardingCompleted Boolean @default(false)

  members    WorkspaceMember[]
  companies  WorkspaceCompany[] // empresas ligadas a este workspace (pivot)
  features   Feature[]
  changelogs ChangelogEntry[]
  scoring    ScoringConfig?
  customers  CustomerCompany[]
  invites    Invite[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]
}

model CustomerCompany {
  id              String    @id @default(cuid())
  workspaceId     String
  workspace       Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  name            String
  segment         String?
  size            String?
  strategicWeight Int       @default(1)
  monthlyRevenue  Decimal?
  employees       Int?

  interestedIn FeatureInterestedCompany[]
  votes        FeatureVote[]
  users        User[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model WorkspaceCompany {
  id          String @id @default(cuid())
  workspaceId String
  companyId   String

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  company   Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)

  weight  Decimal @default(1) @db.Decimal(10, 2)
  segment String? // segmento
  size    String? // porte

  members WorkspaceMember[] // contacts (CUSTOMERs) deste cliente no workspace

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([workspaceId, companyId])
  @@index([workspaceId])
  @@index([companyId])
}

model WorkspaceMember {
  id          String        @id @default(cuid())
  workspaceId String
  userId      String
  role        WorkspaceRole @default(MEMBER)

  workspace Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Se CUSTOMER, aponta para a empresa ligada ao workspace
  workspaceCompany   WorkspaceCompany? @relation(fields: [workspaceCompanyId], references: [id], onDelete: SetNull)
  workspaceCompanyId String?

  // Receita mensal e nº de colaboradores para motor de score
  monthlyRevenue Decimal?
  employees      Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId])
}

model Invite {
  id        String   @id @default(uuid())
  email     String
  role      Role
  createdAt DateTime @default(now()) @map("created_at")

  author   User?   @relation(fields: [authorId], references: [id], onDelete: SetNull)
  authorId String? @map("author_id")

  workspace   Workspace @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId String    @map("workspaceId")

  @@unique([email, workspaceId])
  @@index([email])
  @@map("invites")
}

model Feature {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  title       String
  description String
  status      FeatureStatus @default(BACKLOG)

  impact Int? // 1..5 (visible to company/admin)
  effort Int? // 1..5 (visible to company/admin)
  score  Decimal @default(0)

  createdById String?
  createdBy   User?   @relation("FeatureAuthor", fields: [createdById], references: [id])

  votes         FeatureVote[]
  comments      FeatureComment[]
  interestedCos FeatureInterestedCompany[]
  changelogs    ChangelogEntry[]           @relation("ChangelogFeature") // <-- ADICIONE

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId, status])
}

model FeatureVote {
  id                String  @id @default(cuid())
  featureId         String
  userId            String
  customerCompanyId String?

  feature         Feature          @relation(fields: [featureId], references: [id])
  user            User             @relation(fields: [userId], references: [id])
  customerCompany CustomerCompany? @relation(fields: [customerCompanyId], references: [id])

  createdAt DateTime @default(now())

  @@unique([featureId, userId])
  @@index([featureId, customerCompanyId])
}

model FeatureInterestedCompany {
  featureId         String
  customerCompanyId String

  feature         Feature         @relation(fields: [featureId], references: [id])
  customerCompany CustomerCompany @relation(fields: [customerCompanyId], references: [id])

  // optional metadata about the interest
  contact       String?
  internalAgent String?
  notes         String?

  createdAt DateTime @default(now())

  @@id([featureId, customerCompanyId])
}

model FeatureComment {
  id        String @id @default(cuid())
  featureId String
  userId    String
  content   String

  feature Feature @relation(fields: [featureId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([featureId])
}

model ChangelogEntry {
  id          String    @id @default(cuid())
  workspaceId String
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  title      String
  content    String
  releasedAt DateTime @default(now())
  featureId  String?
  feature    Feature? @relation("ChangelogFeature", fields: [featureId], references: [id]) // <-- AJUSTE

  assets ChangelogAsset[]

  createdById String?
  createdBy   User?   @relation("ChangelogAuthor", fields: [createdById], references: [id]) // <-- AJUSTE

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([workspaceId, releasedAt])
}

model ChangelogAsset {
  id          String         @id @default(cuid())
  changelogId String
  changelog   ChangelogEntry @relation(fields: [changelogId], references: [id])

  key      String // S3 key
  url      String
  size     Int?
  mimeType String?

  createdAt DateTime @default(now())
}

model ScoringConfig {
  id          String    @id @default(cuid())
  workspaceId String    @unique
  workspace   Workspace @relation(fields: [workspaceId], references: [id])

  // pesos: número de empresas pedindo, impacto, esforço (negativo), receita do cliente
  weightCompanies Int @default(5)
  weightImpact    Int @default(3)
  weightEffort    Int @default(-2)
  weightRevenue   Int @default(0)
  weightEmployees Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
